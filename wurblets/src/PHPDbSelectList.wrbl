@[/* vim: set filetype=php :*/]@
@[/*<?php*/]@
@{extends AbstractFlex}@
@[

    $ac = $this->getArgCount();
    if($ac <= 1)
        throw new Exception("usage: wurblet <guard> PHPDbSelectList <modelname> <key1...keyn> [-append=APPEND] [-sql=SQL] [-limit] [-offset]");

    $modelFile = WurbUtil::translateVars($this->getArg(0), $this->getContainer()->getProperties(PROPSPACE_WURBLET));

    // fetch the model
    $model = $this->newGeneric4ColModelInstance($modelFile);


    $scope = $this->haveParameter('private') ? 'private' : 'public';

    if($this->haveParameter('append')) {
        $append = $this->getParameter('append');
    } else {
        $append = null;
    }

    if($this->haveParameter('sql')) {
        $sql = $this->getParameter('sql');
    } else {
        $sql = null;
    }

    if($this->haveParameter('orderByClause')) {
        $orderBy = true;
        $orderByClause = "\$sql .= \" ORDER BY \".".$this->getParameter('orderByClause');
    } else if($this->haveParameter('orderBy')) {
        $orderBy = array();
        foreach(explode(',',$this->getParameter('orderBy')) as $orderName) {
            $orderBy[] = $orderName;
        }
        if(count($orderBy) == 0) {
            throw new Exception($this->getGuardName().": orderBy must reference field names");
        }

        foreach($orderBy as $orderName) {
            if($model->findAttribute($orderName) == null) {
                throw new Exception($this->getGuardName().", ".$orderName.": not found");
            }
        }

        $orderBy = array_map(create_function('$a', 'return "self::\$FIELD_".strtoupper($a);'), $orderBy);
        $orderByClause = "\$sql .= \" ORDER BY \".".implode('.",".', $orderBy);

    } else {
        $orderBy = null;
    }


    $methodName = $this->getGuardName();
    $stmtIdName = $this->getGuardName()."StatementId";

    $keys = array();
    for($i = 1; $i < $this->getArgCount(); $i++) {
        $name = $this->getArg($i);
        if($model->findAttribute($name) == null) {
            throw new Exception($name.": attribute not found");
        }
        $keys[] = $this->getArg($i);
    }

    $fieldNames = array_map(create_function('$a', 'return "self::\$FIELD_".strtoupper($a);'), $keys);
    $phpFieldNames = array_map(create_function('$a', 'return "$".$a;'), $keys);
    
    $argNames = array();
    if($this->haveParameter('limit')) {
        $argNames[] = '$limit';
        $haveLimit = true;
    } else {
        $haveLimit = false;
    }
    if($this->haveParameter('offset')) {
        $argNames[] = '$offset';
        $haveOffset = true;
    } else {
        $haveOffset = false;
    }
    foreach($phpFieldNames as $phpFieldName) {
        $argNames[] = $phpFieldName;
    }

]@
    @($scope)@ function @($methodName)@(@(implode(',',$argNames))@) {
        $stmtId = self::$@($stmtIdName)@;
        if($stmtId == 0) {
@[
    // handle sql option
    if($sql == null) {
]@
            $sql = $this->getSqlSelectAllFields();
@[
        foreach($fieldNames as $fieldName) {
]@
            $sql .= " AND ".@($fieldName)@."=?";
@[
        }
    } else {
]@
            $sql = $this->getSqlSelectAllFields() @($sql)@;
@[
    }

    // handle order
    if($orderBy) {
]@
            @($orderByClause)@;
@[
    }

    // handle append
    if($append != null) {
]@
            $sql .= @($append)@;
@[
    }

    // handle limit+offset definition
    if($haveLimit && $haveOffset) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatLimitOffsetClause("?", "?");';
    } else if($haveLimit) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatLimitClause("?");';
    } else if($haveOffset) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatOffsetClause("?");';
    } else {
        $loAppend = "";
    }
]@
            @($loAppend)@
            $stmtId = $this->getDb()->prepareStatement($sql);
            self::$@($stmtIdName)@ = $stmtId;
        }
        $ps = $this->getDb()->getPreparedStatement($stmtId);
        $ndx = 1;
@[
    foreach($phpFieldNames as $fieldName) {
]@
        $ps->setValue($ndx++, @($fieldName)@);
@[
    }

    // handle the limit+offset values
    $limitValue = $haveLimit ? '$ps->setValue($ndx++, $limit);' : '';
    $offsetValue = $haveOffset ? '$ps->setValue($ndx++, $offset);' : '';
]@
        @($limitValue)@
        @($offsetValue)@
        $list = array();
        $rs = $ps->executeQuery();
        try {
            while ($rs->next()) {
                $obj = $this->newObject();
                $obj->getFields($rs);
                $list[] = $obj;
            }
            $rs->close();
            return $list;
        } catch (Exception $ex) {
            $rs->close();
            if ($ex instanceof DBRuntimeException) {
                throw $ex;
            } else {
                throw new DbRuntimeException($ex->getTraceAsString(), $this->db);
            }
        }
    }
    private static $@($stmtIdName)@ = 0;
@[
]@
@[/*?>*/]@
