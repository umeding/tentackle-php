@[/* vim: set filetype=php :*/]@
@[/*<?php*/]@
@{extends AbstractFlex}@
@[

    $noctor = false;
    $ac = $this->getArgCount();
    if($ac != 1)
        throw new Exception("usage: wurblet <guard> PHPMethods <modelname>");

    $modelFile = WurbUtil::translateVars($this->getArg(0), $this->getContainer()->getProperties(PROPSPACE_WURBLET));

    if($this->haveParameter('noctor')) {
        $noctor = true;
    }
    
    // fetch the model
    $model = $this->newGeneric4ColModelInstance($modelFile);

    foreach($model->getAttributeList() as $attr) {
        if(!isset($attr['nomethod'])) {
            switch($attr['type']) {
                case 'Timestamp':
                    $datatype_name = 'Timestamp $'.$attr['name'];
                    $datatype_instance = 'new Timestamp';
                    break;
                default:
                    $datatype_name = '$'.$attr['name'];
                    $datatype_instance = '';
                    break;
            }
]@
    /**
     * Get the @($attr['comment'])@ field
     * \@return @($attr['comment'])@
     */
    public function get@(ucfirst($attr['name']))@() {
        return $this->@($attr['name'])@;
    }

    /**
     * Set the @($attr['comment'])@ field
     * \@param @($attr['name'])@ is the @($attr['comment'])@
     */
    public function set@(ucfirst($attr['name']))@(@($datatype_name)@) {
        $this->@($attr['name'])@ = $@($attr['name'])@;
    }
@[
        }
    }
]@
@[
]@
@[/*?>*/]@
