<?php
// wurblet generated by Wurbiler, see http://www.wurblizer.org for more details.

require_once('AbstractWurblet.php');
require_once('AbstractFlex.php');

class PHPDbDeleteBy extends AbstractFlex {
  public function run() {
    parent::run();

/* vim: set filetype=php :*//*<?php*/
    $ac = $this->getArgCount();
    if($ac <= 1)
        throw new Exception("usage: wurblet <guard> PHPDbDeleteUnique <modelname> <key1...keyn>");

    $modelFile = WurbUtil::translateVars($this->getArg(0), $this->getContainer()->getProperties(PROPSPACE_WURBLET));

    // fetch the model
    $model = $this->newGeneric4ColModelInstance($modelFile);

    $scope = $this->haveParameter('private') ? 'private' : 'public';
    $operation = $this->haveParameter('or') ? ' OR' : 'AND';

    if($this->haveParameter('sql')) {
        $sql = $this->getParameter('sql');
    } else {
        $sql = null;
    }


    $methodName = $this->getGuardName();
    $stmtIdName = $this->getGuardName()."StatementId";

    $keys = array();
    for($i = 1; $i < $this->getArgCount(); $i++) {
        $name = $this->getArg($i);
        if($model->findAttribute($name) == null) {
            throw new Exception($name.": attribute not found");
        }
        $keys[] = $this->getArg($i);
    }

    $fieldNames = array_map(create_function('$a', 'return "self::\$FIELD_".strtoupper($a);'), $keys);
    $phpFieldNames = array_map(create_function('$a', 'return "$".$a;'), $keys);

    fwrite($this->out,$this->source[0]); //  
    fwrite($this->out,$scope);
    fwrite($this->out,$this->source[1]); //  function 
    fwrite($this->out,$methodName);
    fwrite($this->out,$this->source[2]); // (
    fwrite($this->out,implode(',',$phpFieldNames));
    fwrite($this->out,$this->source[3]); // ) { $stmtId = self::...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[4]); // ; if($stmtId == 0) {...
    // handle sql option
    if($sql == null) {
      fwrite($this->out,$this->source[5]); //  $sql = "DELETE FROM...
        $delimKW = " WHERE ";
        foreach($fieldNames as $fieldName) {
          fwrite($this->out,$this->source[6]); //  $sql .= "
          fwrite($this->out,$delimKW);
          fwrite($this->out,$this->source[7]); // ".
          fwrite($this->out,$fieldName);
          fwrite($this->out,$this->source[8]); // ."=?"; 
            $delimKW = "   $operation ";
        }
    } else {
       fwrite($this->out,$this->source[9]); //  $sql = "DELETE FROM...
       fwrite($this->out,$sql);
       fwrite($this->out,$this->source[10]); // ; 
    }

    fwrite($this->out,$this->source[11]); //  $stmtId = $this->ge...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[12]); //  = $stmtId; } $ps = ...
    foreach($phpFieldNames as $fieldName) {
      fwrite($this->out,$this->source[13]); //  $ps->setValue($ndx+...
      fwrite($this->out,$fieldName);
      fwrite($this->out,$this->source[14]); // ); 
    }
    fwrite($this->out,$this->source[15]); //  return $ps->execute...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[16]); //  = 0; 
/*?>*/
  }
}
?>
