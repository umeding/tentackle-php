<?php
// wurblet generated by Wurbiler, see http://www.wurblizer.org for more details.

require_once('AbstractWurblet.php');
require_once('AbstractFlex.php');

class PHPJsonSerializer extends AbstractFlex {
  public function run() {
    parent::run();

/* vim: set filetype=php :*//*<?php*/
    $ac = $this->getArgCount();
    if($ac != 1)
        throw new Exception("usage: wurblet <guard> PHPFieldNames <modelname>");

    $modelFile = WurbUtil::translateVars($this->getArg(0), $this->getContainer()->getProperties(PROPSPACE_WURBLET));

    // fetch the model
    $model = $this->newGeneric4ColModelInstance($modelFile);
    
    // ============== TO JSON =====================================
    fwrite($this->out,$this->source[0]); //  /** * Create a JSON...
    foreach($model->getAttributeList() as $attr) {
        if(!isset($attr['nomethod'])) {
          fwrite($this->out,$this->source[1]); //  $jsonFields['
          fwrite($this->out,$attr['name']);
          fwrite($this->out,$this->source[2]); // '] = $this->get
          fwrite($this->out,ucfirst($attr['name']));
          fwrite($this->out,$this->source[3]); // (); 
        }
    }
    fwrite($this->out,$this->source[4]); //  return json_encode(...
    foreach($model->getAttributeList() as $attr) {
        if(!isset($attr['nomethod'])) {
          fwrite($this->out,$this->source[5]); //  $this->set
          fwrite($this->out,ucfirst($attr['name']));
          fwrite($this->out,$this->source[6]); // ($arr['
          fwrite($this->out,$attr['name']);
          fwrite($this->out,$this->source[7]); // ']); 
        }
    }
    fwrite($this->out,$this->source[8]); //  } 
/*?>*/
  }
}
?>
