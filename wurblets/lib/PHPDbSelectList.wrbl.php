<?php
// wurblet generated by Wurbiler, see http://www.wurblizer.org for more details.

require_once('AbstractWurblet.php');
require_once('AbstractFlex.php');

class PHPDbSelectList extends AbstractFlex {
  public function run() {
    parent::run();

/* vim: set filetype=php :*//*<?php*/
    $ac = $this->getArgCount();
    if($ac < 1)
        throw new Exception("usage: wurblet <guard> PHPDbSelectList <modelname> [key1...keyn] [-append=APPEND] [-sql=SQL] [-limit] [-offset]");

    $modelFile = WurbUtil::translateVars($this->getArg(0), $this->getContainer()->getProperties(PROPSPACE_WURBLET));

    // fetch the model
    $model = $this->newGeneric4ColModelInstance($modelFile);


    $scope = $this->haveParameter('private') ? 'private' : 'public';

    if($this->haveParameter('append')) {
        $append = $this->getParameter('append');
    } else {
        $append = null;
    }

    if($this->haveParameter('sql')) {
        $sql = $this->getParameter('sql');
    } else {
        $sql = null;
    }

    if($this->haveParameter('orderByClause')) {
        $orderBy = true;
        $orderByClause = "\$sql .= \" ORDER BY \".".$this->getParameter('orderByClause');
    } else if($this->haveParameter('orderBy')) {
        $orderBy = array();
        foreach(explode(',',$this->getParameter('orderBy')) as $orderName) {
            $orderBy[] = $orderName;
        }
        if(count($orderBy) == 0) {
            throw new Exception($this->getGuardName().": orderBy must reference field names");
        }

        foreach($orderBy as $orderName) {
            if($model->findAttribute($orderName) == null) {
                throw new Exception($this->getGuardName().", ".$orderName.": not found");
            }
        }

        $orderBy = array_map(create_function('$a', 'return "self::\$FIELD_".strtoupper($a);'), $orderBy);
        $orderByClause = "\$sql .= \" ORDER BY \".".implode('.",".', $orderBy);

    } else {
        $orderBy = null;
    }


    $methodName = $this->getGuardName();
    $stmtIdName = $this->getGuardName()."StatementId";

    $keys = array();
    for($i = 1; $i < $this->getArgCount(); $i++) {
        $name = $this->getArg($i);
        if($model->findAttribute($name) == null) {
            throw new Exception($name.": attribute not found");
        }
        $keys[] = $this->getArg($i);
    }

    $fieldNames = array_map(create_function('$a', 'return "self::\$FIELD_".strtoupper($a);'), $keys);
    $phpFieldNames = array_map(create_function('$a', 'return "$".$a;'), $keys);
    
    $argNames = array();
    if($this->haveParameter('limit')) {
        $argNames[] = '$limit';
        $haveLimit = true;
    } else {
        $haveLimit = false;
    }
    if($this->haveParameter('offset')) {
        $argNames[] = '$offset';
        $haveOffset = true;
    } else {
        $haveOffset = false;
    }
    foreach($phpFieldNames as $phpFieldName) {
        $argNames[] = $phpFieldName;
    }

    fwrite($this->out,$this->source[0]); //  
    fwrite($this->out,$scope);
    fwrite($this->out,$this->source[1]); //  function 
    fwrite($this->out,$methodName);
    fwrite($this->out,$this->source[2]); // (
    fwrite($this->out,implode(',',$argNames));
    fwrite($this->out,$this->source[3]); // ) { $stmtId = self::...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[4]); // ; if($stmtId == 0) {...
    // handle sql option
    if($sql == null) {
      fwrite($this->out,$this->source[5]); //  $sql = $this->getSq...
        foreach($fieldNames as $fieldName) {
          fwrite($this->out,$this->source[6]); //  $sql .= " AND ".
          fwrite($this->out,$fieldName);
          fwrite($this->out,$this->source[7]); // ."=?"; 
        }
    } else {
       fwrite($this->out,$this->source[8]); //  $sql = $this->getSq...
       fwrite($this->out,$sql);
       fwrite($this->out,$this->source[9]); // ; 
    }

    // handle order
    if($orderBy) {
      fwrite($this->out,$this->source[10]); //  
      fwrite($this->out,$orderByClause);
      fwrite($this->out,$this->source[11]); // ; 
    }

    // handle append
    if($append != null) {
      fwrite($this->out,$this->source[12]); //  $sql .= 
      fwrite($this->out,$append);
      fwrite($this->out,$this->source[13]); // ; 
    }

    // handle limit+offset definition
    if($haveLimit && $haveOffset) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatLimitOffsetClause("?", "?");';
    } else if($haveLimit) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatLimitClause("?");';
    } else if($haveOffset) {
        $loAppend = '$sql .= $this->getDb()->sqlFormatOffsetClause("?");';
    } else {
        $loAppend = "";
    }
    fwrite($this->out,$this->source[14]); //  
    fwrite($this->out,$loAppend);
    fwrite($this->out,$this->source[15]); //  $stmtId = $this->ge...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[16]); //  = $stmtId; } $ps = ...
    foreach($phpFieldNames as $fieldName) {
      fwrite($this->out,$this->source[17]); //  $ps->setValue($ndx+...
      fwrite($this->out,$fieldName);
      fwrite($this->out,$this->source[18]); // ); 
    }

    // handle the limit+offset values
    $limitValue = $haveLimit ? '$ps->setValue($ndx++, $limit);' : '';
    $offsetValue = $haveOffset ? '$ps->setValue($ndx++, $offset);' : '';
    fwrite($this->out,$this->source[19]); //  
    fwrite($this->out,$limitValue);
    fwrite($this->out,$this->source[20]); //  
    fwrite($this->out,$offsetValue);
    fwrite($this->out,$this->source[21]); //  $list = array(); $r...
    fwrite($this->out,$stmtIdName);
    fwrite($this->out,$this->source[22]); //  = 0; 
/*?>*/
  }
}
?>
