<?php
// wurblet generated by Wurbiler, see http://www.wurblizer.org for more details.

require_once('AbstractWurblet.php');
require_once('AbstractFlex.php');

class IncludeMappings extends AbstractFlex {
  public function run() {
    parent::run();

/* vim: set filetype=php :*//*<?php*/    $guardname = $this->getContainer()->getProperty("wurblet", "guardname");

    if($this->haveParameter('line-comment')) {
        $lineComment = $this->getParameter('line-comment');
        $startComment = $lineComment;
        $endComment = $lineComment;
    } else {
        // assume C-style comments
        $lineComment = " *";
        $startComment = "/*";
        $endComment = " */";
    }

    fwrite($this->out,$startComment);
    fwrite($this->out,$this->source[0]); //  
    fwrite($this->out,$lineComment);
    fwrite($this->out,$this->source[1]); //  @> 
    fwrite($this->out,$guardname);
    fwrite($this->out,$this->source[2]); //  
    $ac = $this->getArgCount();
    for($i = 0; $i < $ac; $i++) {
        $modelname = $this->getArg($i);
        fwrite($this->out,$lineComment);
        fwrite($this->out,$this->source[3]); //  # ======>>>> 
        fwrite($this->out,$modelname);
        fwrite($this->out,$this->source[4]); //  
        $fp = WurbUtil::openReader($modelname);
        while(!feof($fp)) {
            $line = fgets($fp, 250);
            $line = trim($line);
            // drop ## lines they are not meant for here
            if(0 == strcmp("##", "".substr($line,0,2)))
                continue;
            // Massage the various styles we may have
            if(isset($line[0]) && $line[0] == '.')
                $line = "# { ".substr($line, 1)." }";
            if(isset($line[0]) && $line[0] == '{')
                $line = "# ".$line;
                fwrite($this->out,$lineComment);
                fwrite($this->out,$this->source[5]); //  
                fwrite($this->out,$line);
                fwrite($this->out,$this->source[6]); //  
        }
        fclose($fp);
    }
    fwrite($this->out,$lineComment);
    fwrite($this->out,$this->source[7]); //  @< 
    fwrite($this->out,$endComment);
    fwrite($this->out,$this->source[8]); //  
/*?>*/
  }
}
?>
